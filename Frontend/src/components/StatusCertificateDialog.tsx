import { useState } from "react";
import { Student } from "../types";

interface StatusCertificateDialogProps {
  student: Partial<Student>;
  onClose: () => void;
}

const StatusCertificateDialog = ({
  student,
  onClose,
}: StatusCertificateDialogProps) => {
  const [purpose, setPurpose] = useState<string>("loan");
  const [otherPurpose, setOtherPurpose] = useState<string>("");
  const [validUntil, setValidUntil] = useState<string>(
    new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split("T")[0],
  );

  const generateCertificateContent = () => {
    let purposeText = "";

    switch (purpose) {
      case "loan":
        purposeText = "X√°c nh·∫≠n ƒëang h·ªçc ƒë·ªÉ vay v·ªën ng√¢n h√†ng";
        break;
      case "military":
        purposeText = "X√°c nh·∫≠n l√†m th·ªß t·ª•c t·∫°m ho√£n nghƒ©a v·ª• qu√¢n s·ª±";
        break;
      case "job":
        purposeText = "X√°c nh·∫≠n l√†m h·ªì s∆° xin vi·ªác / th·ª±c t·∫≠p";
        break;
      case "other":
        purposeText = `X√°c nh·∫≠n l√Ω do kh√°c: ${otherPurpose}`;
        break;
    }

    const currentDate = new Date().toLocaleDateString();

    return {
      studentName: student.full_name,
      studentId: student.student_id,
      dateOfBirth: new Date(student.date_of_birth ?? "").toLocaleDateString(),
      gender: student.gender,
      faculty: student.Faculty?.faculty_name || student.faculty_id,
      program: student.Program?.program_name || student.program_id,
      courseYear: student.course_year,
      status: student.Status?.status_name || student.status_id,
      purpose: purposeText,
      validUntil: new Date(validUntil).toLocaleDateString(),
      issuedDate: currentDate,
    };
  };
  const exportToMarkdown = () => {
    const data = generateCertificateContent();
    const markdownContent = `**TR∆Ø·ªúNG ƒê·∫†I H·ªåC KHOA H·ªåC T·ª∞ NHI√äN**
    **PH√íNG ƒê√ÄO T·∫†O**
    üìç ƒê·ªãa ch·ªâ: 227 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh
    üìû ƒêi·ªán tho·∫°i: (028) 62884499 | üìß Email:  info@hcmus.edu.vn

    ---

    ### **GI·∫§Y X√ÅC NH·∫¨N T√åNH TR·∫†NG SINH VI√äN**

    Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n x√°c nh·∫≠n:

    **1. Th√¥ng tin sinh vi√™n:**
    - **H·ªç v√† t√™n:** ${data.studentName}
    - **M√£ s·ªë sinh vi√™n:** ${data.studentId}
    - **Ng√†y sinh:** ${data.dateOfBirth}
    - **Gi·ªõi t√≠nh:** ${data.gender}
    - **Khoa:** ${data.faculty}
    - **Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o:** ${data.program}
    - **Kh√≥a:** ${data.courseYear}

    **2. T√¨nh tr·∫°ng sinh vi√™n hi·ªán t·∫°i:** ${data.status}

    **3. M·ª•c ƒë√≠ch x√°c nh·∫≠n:**
    - ${data.purpose}

    **4. Th·ªùi gian c·∫•p gi·∫•y:**
    - Gi·∫•y x√°c nh·∫≠n c√≥ hi·ªáu l·ª±c ƒë·∫øn ng√†y: ${data.validUntil}

    üìç **X√°c nh·∫≠n c·ªßa Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n**

    üìÖ Ng√†y c·∫•p: ${data.issuedDate}

    üñã **Tr∆∞·ªüng Ph√≤ng ƒê√†o T·∫°o**
    (K√Ω, ghi r√µ h·ªç t√™n, ƒë√≥ng d·∫•u)  `;

    const blob = new Blob([markdownContent], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `certificate_${data.studentId}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const exportToHTML = () => {
    const data = generateCertificateContent();

    const htmlContent = `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Status Certificate</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      .header {
        text-align: center;
        margin-bottom: 20px;
        border-bottom: 2px solid #333;
        padding-bottom: 10px;
      }
      .title {
        text-align: center;
        font-weight: bold;
        font-size: 18px;
        margin: 20px 0;
      }
      .section {
        margin-bottom: 15px;
      }
      .footer {
        margin-top: 30px;
        display: flex;
        justify-content: space-between;
      }
      .signature {
        text-align: center;
        width: 200px;
      }
    </style>
  </head>
  <body>
    <div class="header">
      <h2>TR∆Ø·ªúNG ƒê·∫†I H·ªåC KHOA H·ªåC T·ª∞ NHI√äN</h2>
      <p>PH√íNG ƒê√ÄO T·∫†O</p>
      <p>ƒê·ªãa ch·ªâ: 227 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM</p>
      <p>ƒêi·ªán tho·∫°i: (028) 62884499 | Email: info@university.edu.vn</p>
    </div>

    <div class="title">
      GI·∫§Y X√ÅC NH·∫¨N T√åNH TR·∫†NG SINH VI√äN
    </div>

    <p>Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n x√°c nh·∫≠n:</p>

    <div class="section">
      <h3>1. Th√¥ng tin sinh vi√™n:</h3>
      <p><strong>H·ªç v√† t√™n:</strong> ${data.studentName}</p>
      <p><strong>M√£ s·ªë sinh vi√™n:</strong> ${data.studentId}</p>
      <p><strong>Ng√†y sinh:</strong> ${data.dateOfBirth}</p>
      <p><strong>Gi·ªõi t√≠nh:</strong> ${data.gender}</p>
      <p><strong>Khoa:</strong> ${data.faculty}</p>
      <p><strong>Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o:</strong> ${data.program}</p>
      <p><strong>Kh√≥a:</strong> ${data.courseYear}</p>
    </div>

    <div class="section">
      <h3>2. T√¨nh tr·∫°ng sinh vi√™n hi·ªán t·∫°i:</h3>
      <p>${data.status}</p>
    </div>

    <div class="section">
      <h3>3. M·ª•c ƒë√≠ch x√°c nh·∫≠n:</h3>
      <p>${data.purpose}</p>
    </div>

    <div class="section">
      <h3>4. Th·ªùi gian c·∫•p gi·∫•y:</h3>
      <p>Gi·∫•y x√°c nh·∫≠n c√≥ hi·ªáu l·ª±c ƒë·∫øn ng√†y: ${data.validUntil}</p>
    </div>

    <div class="footer">
      <div></div>
      <div class="signature">
        <p>Ng√†y c·∫•p: ${data.issuedDate}</p>
        <p><strong>Tr∆∞·ªüng Ph√≤ng ƒê√†o T·∫°o</strong></p>
        <p>(K√Ω, ghi r√µ h·ªç t√™n, ƒë√≥ng d·∫•u)</p>
      </div>
    </div>
  </body>
  </html>
  `;
    const blob = new Blob([htmlContent], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `certificate_${data.studentId}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="fixed inset-0 bg-gray-400 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <h2 className="text-xl font-bold mb-4">Status Certificate</h2>

        <div className="mb-4">
          <p className="text-sm text-gray-600 mb-2">
            Student: {student.full_name} ({student.student_id})
          </p>
          <p className="text-sm text-gray-600">
            Current Status: {student.Status?.status_name || student.status_id}
          </p>
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2">
            Purpose of Certificate
          </label>
          <select
            className="w-full p-2 border rounded"
            value={purpose}
            onChange={(e) => setPurpose(e.target.value)}
          >
            <option value="loan">Vay v·ªën ng√¢n h√†ng</option>
            <option value="military">T·∫°m ho√£n nghƒ©a v·ª• qu√¢n s·ª±</option>
            <option value="job">Xin vi·ªác / th·ª±c t·∫≠p</option>
            <option value="other">L√Ω do kh√°c</option>
          </select>
        </div>

        {purpose === "other" && (
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              Specify Other Purpose
            </label>
            <input
              type="text"
              className="w-full p-2 border rounded"
              value={otherPurpose}
              onChange={(e) => setOtherPurpose(e.target.value)}
              placeholder="Enter purpose"
            />
          </div>
        )}

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2">
            Valid Until
          </label>
          <input
            type="date"
            className="w-full p-2 border rounded"
            value={validUntil}
            onChange={(e) => setValidUntil(e.target.value)}
          />
        </div>

        <div className="flex justify-end space-x-2 mt-6">
          <button
            onClick={exportToMarkdown}
            className="px-4 py-2 bg-blue-500  rounded hover:bg-blue-600"
          >
            Export to Markdown
          </button>
          <button
            onClick={exportToHTML}
            className="px-4 py-2 bg-green-500  rounded hover:bg-green-600"
          >
            Export to HTML
          </button>
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  );
};

export default StatusCertificateDialog;
